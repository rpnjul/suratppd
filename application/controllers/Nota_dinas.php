<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Nota_dinas extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->library('Loader');
        $this->load->model('M_notadinas');
        $this->load->model('M_pegawai');
        $this->load->model('M_surattugas');
        $this->load->model('M_dinaspegawai');
        $this->sesi = $this->session->has_userdata('status');
        if (!$this->sesi) {
            redirect('login','refresh');
        }
    } 

    /*
     * Listing of nota_dinas
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('nota_dinas/index?');
        $config['total_rows'] = $this->M_notadinas->get_all_nota_dinas_count();
        $this->pagination->initialize($config);

        $data['nota_dinas'] = $this->M_notadinas->get_all_nota_dinas($params);
        
        $data['_view'] = 'v_nota_dinas/index';
        $data['_landing'] = false;
        $data['judul'] = "Nota dinas";
        $load = $this->loader->load($data);
        $this->load->view('layouts/content',$load);
    }

        private function kodeotomatis()
            {
                $res = $this->db->query('select max(right(nds_no,4)) as `urut_tahun`,max(substring(nds_no,4,3)) as `urut` from tb_nds')->row();
                $tgl = date('/Y');
                if (isset($res->urut)) {
                    $urut = intval($res->urut);
                    if (substr($tgl, 1,4)==$res->urut_tahun) { ## tahun
                        if ($urut >= 999) {
                                $urut+=0;
                        }else{
                                $urut++;
                        }
                    }else{
                        $urut=1;
                    }
                }else{
                    $urut=1;
                }
                $str_length = strlen($urut);
                $dig = substr("000{$urut}", $str_length);
                return $dig.'/DPB/SPPD/VII'.$tgl;
        }

    public function cek_surattugas($nomor){
       $cek = $this->M_surattugas->search_surattugas($nomor);
       if(count($cek)<1)
       {
          $this->form_validation->set_message('cek_surattugas', 'Nomor tidak sesuai');
          return FALSE;
       } 
       return TRUE;
    }

    public function cek_nip($nip){
       $nip = explode(' - ', $nip)[0];
       $cek = $this->M_pegawai->get_pegawai_by_nip($nip);
       //var_dump($nip);
       if(!isset($cek))
       {
          $this->form_validation->set_message('cek_nip', 'Data tidak sesuai');
          return FALSE;
       } 
       return TRUE;
    } 

    /*
     * Adding a new nota_dina
     */
    function add()
    {   
        $this->load->library('form_validation');
        $this->form_validation->set_rules('srtgs_no','Ref. Surat tugas','required|callback_cek_surattugas');
        $this->form_validation->set_rules('rcn_no','Nomor Rincian','required|max_length[125]');
        // $this->form_validation->set_rules('nds_no','Isi surat','required');
        $this->form_validation->set_rules('nds_dsr','Nomor Kwitansi','required');
        $this->form_validation->set_rules('nds_tgl','Nomor Nota','is_unique[tb_nds.nds_no]');
        //$pengikut = ;
        //var_dump(sizeof($this->input->post('pengikut')));
        
        $this->rules();
        if($this->form_validation->run())     
        {   
            $st = $this->M_surattugas->get_surattugas_by_no($this->input->post('srtgs_no'));
            $params = array(
                    'nds_no'    => $this->kodeotomatis(),
      				'srtgs_no'  => $this->input->post('srtgs_no'),
                    'rcn_no'    => $this->input->post('rcn_no'),
                    'pgw_nip'   => $st['pgw_nip'],
      				'nds_tgl'   => date('Y-m-d'),
      				'nds_dsr'   => $this->input->post('nds_dsr'),
            );
            
            $nota_dinas_id = $this->M_notadinas->add_nota_dinas($params);
            $par = array(
                'srtgs_sts' => 2
            );
            $stt = $this->M_surattugas->update_surattugas($st['srtgs_id'],$par);
            if ($stt) {
                $pegawai = $this->M_pegawai->get_pegawai_by_nip($st->pgw_nip);
                if($pegawai){
                    if (!empty($this->input->post('pgw_nip'))) {
                             if (!empty($tgl) & $this->cek_tgl($pgwnds_tgl) ) {
                                 $pare = array(
                                       'nds_id'     =>  $nota_dinas_id,
                                       'pgw_nip'    =>  $st->pgw_nip,
                                       'pgwnds_tgl' =>  $tgl,
                                       'pgwnds_tmt' =>  $pgwnds_tmt,
                                       'pgwnds_pkr' =>  $pgwnds_pkr,
                                       'pgwnds_ket' =>  $pgwnds_ket
                                 );
                                 $this->M_dinaspegawai->add_dinas_pegawai($pare); 
                             }
                    }
                }
            }
            redirect('nota_dinas/index');
        }
        else
        {            
            $data['_view'] = 'v_nota_dinas/add';
            $data['_landing'] = false;
            $data['judul'] = "Nota dinas";
            $data['kode'] = $this->kodeotomatis();
            //$data['pengikut'] = $_POST['pengikut[]'];
            $load = $this->loader->load($data);
            $this->load->view('layouts/content',$load);
        }
    }  


    function cek_tgl($date, $format = 'Y-m-d')
    {
        $d = DateTime::createFromFormat($format, $date);
        return $d && $d->format($format) == $date;
    }



    function rules(){
        $this->form_validation->set_message('max_length', '{field} tidak dapat lebih dari {param} karakter.');
        $this->form_validation->set_message('min_length', '{field} tidak dapat kurang dari {param} karakter.');
        $this->form_validation->set_message('required', 'Memerlukan {field}.');
        $this->form_validation->set_message('is_unique', '{field} telah digunakan.');
    }

    /*
     * Editing a nota_dina
     */
    function edit($nds_id)
    {   
        // check if the nota_dina exists before trying to edit it
        $data['nota_dinas'] = $this->M_notadinas->get_nota_dinas($nds_id);
        $data['pengikut_dinas'] = $this->M_dinaspegawai->get_dinas_pegawai_by_no($data['nota_dinas']['nds_id']);
        $data['count_pgw'] = $this->M_dinaspegawai->get_all_dinas_pegawai_count_by_nds($data['nota_dinas']['nds_id']);;
        
       if ($this->session->userdata('nip')==$data['nota_dinas']['pgw_nip']) {
            if(isset($data['nota_dinas']['nds_id'])){
                $this->load->library('form_validation');
              //  $nomor =  ($this->input->post('nds_no') !=  $data['nota_dinas']['nds_no']) ? '|is_unique[tb_nds.nds_no]' : '';         
              //$this->form_validation->set_rules('nds_no','Nomor Surat Tugas','required|max_length[30]'.$nomor);
            //   $this->form_validation->set_rules('nds_prh','Perihal surat','required|max_length[125]');
              $this->form_validation->set_rules('nds_dsr','Isi surat','required');
              $this->form_validation->set_rules('srtgs_no','Ref. Surat tugas','required|callback_cek_surattugas');
              if(! empty($this->input->post('pgw_nip'))):
              foreach ($this->input->post('pgw_nip') as $key => $value) {
                  $this->form_validation->set_rules('pgw_nip['.$key.']','NIP pegawai','required|callback_cek_nip');
                  $this->form_validation->set_rules('pgwnds_tgl['.$key.']','Tanggal','required');
                  $this->form_validation->set_rules('pgwnds_tmt['.$key.']','Tempat','required|max_length[55]');
                  $this->form_validation->set_rules('pgwnds_pkr['.$key.']','Nomor Perkara','required|max_length[80]');
                  $this->form_validation->set_rules('pgwnds_ket['.$key.']','Keterangan','max_length[55]');
              }endif;
              $this->rules();
              if($this->form_validation->run())     
              {  
                  $params = array(
                   'srtgs_no' => $this->input->post('srtgs_no'),
                   'nds_prh' => $this->input->post('nds_prh'),
                   'nds_prh' => NULL,
                   'nds_tgl' => date('Y-m-d'),
                   'pgw_nip' => $this->session->userdata('nip'),
                   'nds_no' => $this->input->post('nds_no'),
                   'nds_dsr' => $this->input->post('nds_dsr'),
                   );
                   $nota = $this->M_notadinas->update_nota_dinas($nds_id,$params);
                   $srt_id = ($data['nota_dinas']['srtgs_no']!=$this->input->post('srtgs_no'));    
                   $st = $this->M_surattugas->get_surattugas_by_no($this->input->post('srtgs_no'));
                   $st2 = $this->M_surattugas->get_surattugas_by_no($data['nota_dinas']['srtgs_no']);
                   $par = array(
                       'srtgs_sts' => 2
                   );   
                   $par2 = array(
                       'srtgs_sts' => 1
                   );      
                   if ($nota) {
                       $this->M_surattugas->update_surattugas($st['srtgs_id'],$par);
                       $st = $this->M_surattugas->update_surattugas($st2['srtgs_id'],$par2);
                       if ($st) {
                           $this->M_dinaspegawai->delete_dinas_pegawai_by_nds($data['nota_dinas']['nds_id']); 
                           if (!empty($this->input->post('pgw_nip'))) {
                               foreach ($this->input->post('pgw_nip') as $key => $value) {
                                    $pgw_nip    = $this->input->post('pgw_nip');
                                    $pgwnds_tgl = $this->input->post('pgwnds_tgl');
                                    $pgwnds_tmt = $this->input->post('pgwnds_tmt');
                                    $pgwnds_pkr = $this->input->post('pgwnds_pkr');
                                    $pgwnds_ket = $this->input->post('pgwnds_ket');
                                    $p = explode(' - ', $pgw_nip[$key])[0];
                                    $tgl = strtotime($pgwnds_tgl[$key]);
                                    $tgl = date('Y-m-d',$tgl);
                                    //var_dump($pgwnds_ket[$key]);
                                    if ($this->cek_nip($pgw_nip[$key]) & !empty($tgl) & $this->cek_tgl($pgwnds_tgl[$key]) ) {
                                        $pare = array(
                                              'nds_id'=>$nds_id,
                                              'pgw_nip'=>$p,
                                              'pgwnds_tgl'=>$tgl,
                                              'pgwnds_tmt'=>$pgwnds_tmt[$key],
                                              'pgwnds_pkr'=>$pgwnds_pkr[$key],
                                              'pgwnds_ket'=>$pgwnds_ket[$key]
                                        );
                                        $this->M_dinaspegawai->add_dinas_pegawai($pare); 
                                    }
                               }
                           }else{

                           }
                           redirect('nota_dinas/index');
                       }else{

                       }
                       
                   }else{
                       $this->M_surattugas->update_surattugas($st['srtgs_id'],$par);
                   }
                 
               }
               else
               {
                   $data['_view'] = 'v_nota_dinas/edit';
                   $data['_landing'] = false;
                   $data['judul'] = "Nota dinas";
                   $load = $this->loader->load($data);
                   $this->load->view('layouts/content',$load);
               }
           }
           else
               show_error('Data tidak ditemukan.');
       }else{
            redirect('login');
       }
    } 

    public function cetak($value='')
    {
        if($this->session->has_userdata('status')){
            $this->load->model('M_suratmasuk');
            $this->load->model('M_pegawai');
            $data['judul']="Nota Dinas";
            $data['nota_dinas']= $this->M_notadinas->get_nota_dinas($value);
            $data['pgw_dinas']= $this->M_dinaspegawai->get_dinas_pegawai_join_by_id($value);
            $data['permintaan']= $this->M_pegawai->get_pegawai_by_nip($data['nota_dinas']['pgw_nip']);
            $data['nota_dinas']['surat_tugas']= $this->M_surattugas->get_surattugas_by_no($data['nota_dinas']['srtgs_no']);
            $data['nama_file']  = 'Nota dinas '.$this->loader->konversi_tanggal($data['nota_dinas']['nds_tgl']).' - '.$data['nota_dinas']['nds_id'];
            $data['pdf'] = $this->load->library('PDFGenerator');
            $html = $this->load->view('template/header_nota',$data, TRUE);
            $this->pdfgenerator->generate($html,$data['nama_file']);
        }else{
            redirect('login');
        }
    }

    /*
     * Deleting nota_dina
     */
    function remove($nds_id)
    {
        $nota_dina = $this->M_notadinas->get_nota_dinas($nds_id);
        //var_dump($nota_dina);

        // check if the nota_dina exists before trying to delete it
        if(isset($nota_dina['nds_id']))
        {
            $del = $this->M_notadinas->delete_nota_dinas($nds_id);
            if ($del) {
                $st = $this->M_surattugas->get_surattugas_by_no($nota_dina['srtgs_no']);
                $par = array(
                    'srtgs_sts' => 1
                );
                $this->M_surattugas->update_surattugas($st['srtgs_id'],$par);
                redirect('nota_dinas/index');
            }
          //  var_dump($del);
            
        }
        else
            show_error('Data tidak ditemukan.');
    }
    
}
